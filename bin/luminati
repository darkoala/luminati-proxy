#!/usr/bin/env node
// LICENSE_CODE ZON
'use strict'; /*jslint node:true, esnext:true*/
const _ = require('underscore');
const fs = require('fs');
const path = require('path');
const dns = require('dns');
const express = require('express');
const Luminati = require('../lib/luminati.js');
const glob = require('glob');
const request = require('request');
const humanize = require('humanize');
const moment = require('moment');
const prompt = require('prompt');
const http = require('http');
const socket_io = require('socket.io');
const hutil = require('hutil');
const etask = hutil.etask;
const config_file = path.join(process.env.APPDATA||process.env.HOME, '.luminati.json');
const argv = require('yargs').usage('Usage: $0 [options] config1 config2 ...')
.alias({h: 'help'})
.describe({
    p: 'Listening port',
    log: `Log level (${Object.keys(Luminati.log_level).join('|')})`,
    customer: 'Customer',
    password: 'Password',
    proxy: 'Super proxy ip or country',
    proxy_count: 'Number of super proxies to use',
    zone: 'Zone',
    country: 'Country',
    city: 'City',
    asn: 'ASN',
    dns: 'DNS resolving (local|remote)',
    pool_size: 'Pool size',
    ssl: 'Enable SSL sniffing',
    max_requests: 'Requests per session',
    session_timeout: 'Session establish timeout',
    direct_include: 'Include pattern for direct requests',
    direct_exclude: 'Exclude pattern for direct requests',
    www: 'Local web port',
})
.default({
    p: 23000,
    log: 'WARNING',
    customer: process.env.LUMINATI_CUSTOMER,
    password: process.env.LUMINATI_PASSWORD,
    zone: process.env.LUMINATI_ZONE||'gen',
    max_requests: 50,
    pool_size: 3,
    session_timeout: 5000,
    proxy_count: 1,
    www: 22999,
}).help('h').argv;
let opts = _.pick(argv, 'zone', 'country', 'city', 'asn', 'max_requests',
    'pool_size', 'log', 'session_timeout', 'direct_include', 'direct_exclude',
    'dns');
let config = argv._.reduce((config, pattern)=>{
    glob.sync(pattern).concat(config_file)
    .filter(filename=>{
        try {
            fs.access(filename, fs.F_OK);
        } catch(err){ return false; }
    })
    .forEach(filename=>{
        [].push.apply(config, [].concat(JSON.parse(fs.readFileSync(filename,
            {encoding: 'utf8'}))).map(conf=>Object.assign({}, opts, conf)));
    });
    return config;
}, []);
config = config.length && config || [opts];
config.filter(conf=>!conf.port)
    .forEach((conf, i)=>Object.assign(conf, {port: argv.p+i}));

function log(level, msg, extra){
    if (Luminati.log_level[level]>Luminati.log_level[argv.log])
        return;
    let args = [`${level}: ${msg}`];
    if (extra)
        args.push(extra);
    console.log.apply(console, args);
}

const json = opt=>etask(function*(){
    if (typeof opt=='string')
        opt = {url: opt};
    opt.json = true;
    let res = etask.nfn_apply(request, [opt]);
    log('DEBUG', `GET ${opt.url} - ${res.statusCode}`);
    return res;
});

const check_credentials = ()=>etask(function*(){
    prompt.message = 'Luminati credentials';
    prompt.override = argv;
    prompt.start();
    return Object.assign(argv, yield etask.nfn_apply(prompt, '.get', [[{
        name: 'customer',
        description: 'CUSTOMER',
        required: true,
    }, {
        name: 'password',
        description: 'PASSWORD',
        required: true,
    }]]));
});

const resolve_super_proxies = ()=>etask(function*(){
    const hosts = [].concat(argv.proxy||'zproxy.luminati.io').map(host=>etask(function*(){
        if (/^\d+\.\d+\.\d+\.\d+$/.test(host))
        {
            log('DEBUG', `using super proxy ${host}`);
            return host;
        }
        let prefix = '';
        if (host.length==2)
        {
            prefix = `servercountry-${host}-`;
            host = 'zproxy.luminati.io';
        }
        const hosts = {};
        const timestamp = Date.now();
        while (Object.keys(hosts).length<argv.proxy_count &&
            Date.now()-timestamp<30000)
        {
            let domain = `${prefix}session-${Date.now()}.${host}`;
            let ips = yield etask.nfn_apply(dns, '.resolve', [domain]);
            log('DEBUG', `resolving ${domain}`, ips);
            ips.forEach(ip=>hosts[ip] = true);
        }
        return Object.keys(hosts);
    }));
    return [].concat.apply([], yield etask.all(hosts));
});

const create_proxies = hosts=>{
    const ssl = argv.ssl && {
        key: fs.readFileSync('./server.key'),
        cert: fs.readFileSync('./server.crt'),
        ca: fs.readFileSync('./ca.crt'),
        requestCert: true,
        rejectUnauthorized: false,
    };
    return etask.all(config.map(conf=>etask(function*(){
        conf.proxy = conf.proxy || hosts;
        if (conf.direct_include || conf.direct_exclude)
        {
            conf.direct = {};
            if (conf.direct_include)
                conf.direct.include = new RegExp(conf.direct_include, 'i');
            if (conf.direct_exclude)
                conf.direct.exclude = new RegExp(conf.direct_exclude, 'i');
            delete conf.direct_include;
            delete conf.direct_exclude;
        }
        const server = new Luminati(Object.assign(_.pick(argv, 'customer',
            'password'), conf, {ssl: ssl}));
        return yield server.listen();
    })));
};

const create_web_interface = proxies=>etask(function*(){
    const timestamp = Date.now();
    const app = express();
    const server = http.Server(app);
    const io = socket_io(server);
    app.set('view engine', 'ejs');
    app.set('views', path.join(__dirname, 'views'));
    Object.assign(app.locals, {humanize: humanize, moment: moment});
    app.use((req, res, next)=>{
        res.locals.path = req.path;
        next();
    });
    app.get('/', (req, res)=>res.render('index', {
        proxies: proxies,
        elapsed: Date.now()-timestamp,
    }));
    app.get('/stats', (req, res, next)=>etask(function*(){
        let r = yield json({
            url: 'https://luminati.io/api/get_customer_bw?details=1',
            headers: {'x-hola-auth':
                `lum-customer-${argv.customer}-zone-gen-key-${argv.password}`},
        })
        res.render('stats', {stats: r.body[argv.customer]||{}});
    }));
    app.use(express.static(path.join(__dirname, 'public')));
    io.on('connection', socket=>etask(function*(){
        const notify = (name, value)=>{
            const data = {};
            data[name] = value;
            io.emit('health', data);
        };
        try {
            yield json('http://lumtest.com/myip');
            notify('network', true);
        } catch(e){ notify('network', false); }

        try {
            yield json('http://zproxy.luminati.io:22225/');
            notify('firewall', true);
        } catch(e){ notify('firewall', false); }
        try {
            let res = yield json({
                url: 'http://zproxy.luminati.io:22225/',
                headers: {'x-hola-auth':
                    `lum-customer-${argv.customer}-zone-gen-key-${argv.password}`},
            });
            notify('credentials', res.statusCode!=407);
        } catch(e){ notify('credentials', false); }
    }));
    setInterval(()=>io.emit('stats', proxies.reduce((stats, proxy)=>{
        stats[proxy.port] = proxy.stats;
        return stats;
    }, {})), 1000);
    server.on('error', err=>this.ethrow(err));
    yield etask.cb_apply(server, '.listen', [argv.www]);
    return server;
});

etask(function*(){
    try {
        yield check_credentials();
        const hosts = yield resolve_super_proxies();
        const proxies = yield create_proxies(hosts);
        proxies.forEach(server=>log('DEBUG', 'created local proxy', server.opt));
        if (argv.www)
        {
            const server = yield create_web_interface(proxies);
            console.log(`admin interface is available at http://127.0.0.1:${server.address().port}`);
        }
    } catch(e){ console.log(e, e.stack); }
});
